{"version":3,"file":"axrl-ngx-extended-form-builder.mjs","sources":["../../projects/ngx-extended-form-builder/src/lib/ngx-extended-form-builder.ts","../../projects/ngx-extended-form-builder/src/public-api.ts","../../projects/ngx-extended-form-builder/src/axrl-ngx-extended-form-builder.ts"],"sourcesContent":["import { FormGroup, FormArray, FormControl } from \"@angular/forms\";\nimport type { ValidatorFn, ValidationErrors, AsyncValidatorFn, AbstractControl } from \"@angular/forms\";\nimport { Observable } from \"rxjs\";\n\n/**\n * Вспомогательная утилита типа.\n * На вход принимает некий тип T, возвращает список только строковых ключей этого типа, при этом значения этих ключей не являются Observable.\n */\nexport type StringKeys<T> = {\n  [ K in keyof T ]: T[ K ] extends Observable<unknown> ?\n  never :\n  K extends string ?\n  K : never;\n}[ keyof T ];\n\n/**\n * Вспомогательный alias-тип ключей в объекте Map, содержащем конфигурацию валидаторов контролов.\n */\nexport type ControlsNames<T> = T extends Array<infer U> ?\n  'main' | 'mainItems' | `mainItems.${ PropertyesKeys<U> }` :\n  T extends Observable<unknown> ?\n  never :\n  'main' | PropertyesKeys<T>;\n/**\n * Вспомогательная утилита типа.\n * На вход принимает некий тип T, возвращает только строковые ключи этого типа.\n */\nexport type PropertyesKeys<T> = T extends undefined | null | number | boolean | symbol | Observable<unknown> ?\n  never :\n  T extends string ?\n  T : T extends Array<infer U> ?\n  PropertyesKeys<U> :\n  {\n    [ K in keyof T ]-?: K extends string ?\n    T[ K ] extends (string | number | boolean | symbol | undefined | null) ?\n    K :\n    T[ K ] extends Observable<unknown> ?\n    never :\n    T[ K ] extends Array<infer U> ?\n    `${ K }Items.${ PropertyesKeys<U> }` | `${ K }Items` | K :\n    `${ K }.${ PropertyesKeys<T[ K ]> }` | K : never\n  }[ keyof T ];\n/**\n * Упрощенная запись для типа объекта FormGroup, образованного из типа T.\n */\nexport type FormGroupType<T> = FormGroup<{ [ K in StringKeys<T> ]: ScanFormType<T[ K ]>; }>;\n\n/**\n * Универсальный тип-утилита.\n * Для любого типа Т выводит правильный тип создаваемой формы, включая любой уровень вложенности.\n * ВАЖНО!\n * Чтобы избежать ошибки переполнения стэка вызовов в рекурсивном процессе создания формы, для любых\n * Observable-значений ( в т.ч., к примеру, Subject  * и EventEmitter) соответствующий элемент формы не создается.\n * ScanFormType это также учитывает.\n */\nexport type ScanFormType<T> = T extends AbstractControl<unknown, unknown> ?\n  T :\n  T extends null | undefined ?\n  never :\n  T extends Array<infer U> ?\n  FormArray<ScanFormType<U>> :\n  T extends (string | number | boolean | symbol | null | undefined) ?\n  FormControl<T> :\n  FormGroupType<T>;\n\nfunction getValidatorsOrNull<T extends ValidatorFn[] | AsyncValidatorFn[] | null>(\n  key: string, keysValidator?: Map<string, T>, addLift: boolean = false\n): T | undefined | null {\n  const result = keysValidator && keysValidator.has(key) ? keysValidator.get(key) : null;\n  if (addLift) {\n    if (result && Array.isArray(result)) {\n      (<ValidatorFn[]> result).push(<ValidatorFn> liftErrors);\n      return <T> result;\n    } else {\n      return result ? result : <T>[ liftErrors ];\n    }\n  } else {\n    return result;\n  };\n}\n\nfunction makeFormGroup<T>(\n  source: T,\n  internalKey: string,\n  keysValidator?: Map<ControlsNames<T>, ValidatorFn[] | null>,\n  asyncKeysValidator?: Map<ControlsNames<T>, AsyncValidatorFn[] | null>\n): FormGroupType<T> {\n  return source instanceof FormGroup<{ [ K in StringKeys<T> ]: ScanFormType<T[ K ]>; }> ?\n    source :\n    (<[ StringKeys<T>, T[ StringKeys<T> ] ][]> Object.entries(source)).reduce(\n      (accumulator: FormGroup, entry: [ StringKeys<T>, T[ StringKeys<T> ] ]) => {\n        const key = entry[ 0 ];\n        const value = entry[ 1 ];\n        if (!(value instanceof Observable)) {\n          accumulator.addControl(\n            key,\n            !!value && (\n              value instanceof FormGroup || value instanceof FormArray || value instanceof FormControl\n            ) ?\n              <ScanFormType<T[ StringKeys<T> ]>> value :\n              makeForm<T[ StringKeys<T> ]>(\n                value,\n                <Map<ControlsNames<T[ StringKeys<T> ]>, ValidatorFn[] | null>> makeNewmainMap<ValidatorFn[] | null, T>(key, keysValidator),\n                <Map<ControlsNames<T[ StringKeys<T> ]>, AsyncValidatorFn[] | null>> makeNewmainMap<AsyncValidatorFn[] | null, T>(key, asyncKeysValidator),\n              )\n          );\n        };\n        return <FormGroupType<T>> accumulator;\n      }, new FormGroup<{ [ K in StringKeys<T> ]: ScanFormType<T[ K ]>; }>(<{ [ K in StringKeys<T> ]: ScanFormType<T[ K ]>; }> {},\n        getValidatorsOrNull(internalKey, keysValidator, true),\n        getValidatorsOrNull(internalKey, asyncKeysValidator, false)\n      )\n    );\n}\n\nfunction makeNewmainMap<T extends ValidatorFn[] | AsyncValidatorFn[] | null, P>(\n  key: StringKeys<P>, oldMap?: Map<string, T>,\n): Map<string, T> | undefined {\n  if (!oldMap || key === 'main' || key === 'mainItems') {\n    return oldMap;\n  } else {\n    if (!oldMap.has(key) && !oldMap.has(`${ key }Items`)) {\n      return new Map<string, T>(\n        Array.from(\n          oldMap.entries()\n        ).filter(\n          item => item[ 0 ] !== 'main' && item[ 0 ] !== 'mainItems'\n        ).map(\n          ([ entryKey, entryValue ]) => [ entryKey.startsWith(`${ key }.`) ? entryKey.replace(`${ key }.`, '') : entryKey, entryValue ]\n        )\n      );\n    } else {\n      const filterPredicate = oldMap.has('main') ?\n        oldMap.has('mainItems') ?\n          (item: [ string, T ]) => item[ 0 ] !== key && item[ 0 ] !== 'main' && item[ 0 ] !== 'mainItems' :\n          (item: [ string, T ]) => item[ 0 ] !== key && item[ 0 ] !== 'main' :\n        oldMap.has('mainItems') ?\n          (item: [ string, T ]) => item[ 0 ] !== key && item[ 0 ] !== 'mainItems' :\n          (item: [ string, T ]) => item[ 0 ] !== key;\n      const newMainValidatorsArray: [ string, T ][] = oldMap.has(key) ?\n        oldMap.has(`${ key }Items`) ?\n          [\n            [ 'main', oldMap.get(key)! ],\n            [ 'mainItems', oldMap.get(`${ key }Items`)! ]\n          ] :\n          [\n            [ 'main', oldMap.get(key)! ],\n          ] :\n        oldMap.has(`${ key }Items`) ?\n          [\n            [ 'mainItems', oldMap.get(`${ key }Items`)! ]\n          ] :\n          [];\n      return new Map<string, T>([\n        ...newMainValidatorsArray,\n        ...Array.from(\n          oldMap.entries()\n        ).filter(filterPredicate).map<[ string, T ]>(\n          ([ entryKey, entryValue ]) => [ entryKey.startsWith(`${ key }.`) ? entryKey.replace(`${ key }.`, '') : entryKey, entryValue ]\n        )\n      ]);\n    };\n  };\n}\n\n/**\n@function makeForm<T>\n  Фабричная функция для создания Angular Reactive Form.\nВ отличие от стандартного FormBuilder - а в пакете @angular/forms, при создании формы из сложных объектов,\nсохраняется вложенность контролов - каждый вложенный объект превращается во вложенную FormGroup,\n  обычные свойства объектов становятся FormControl - ами, а массивы - FormArray - ми.\nПри этом создаваемая форма имеет более строгую типизацию.\n\n  ВАЖНО!\n   Чтобы избежать ошибки переполнения стэка вызовов в рекурсивном процессе создания формы, для любых;\nObservable - значений(в т.ч., к примеру, Subject * и EventEmitter) соответствующий элемент формы не создается.\n * @param source  источник данных типа T для создания формы.\n * @param keysValidator объект Map с конфигурацией синхронных валидаторов контролов формы.\n * В качестве ключей могут быть указаны следующие значения:\n *  PropertyesKeys<T> - строковые ключи в типе T, включая строковые ключи всех вложенных типов, разделенные \".\" - точкой.\n    Например имеется такой тип:\n    ```ts\n                    interface User {\n                      firstname: string;\n                      lastname: string;\n                      phone:  {\n                        code: string;\n                        number: string;\n                        }\n                      };\n    ```\n    Для формы, которая будет создана из объекта User в конфигурации валидаторов названия контролов можно будет указать так:\n    `lastname` или`phone`, или`phone.code`.\n\n   'main' - специальное значение, являющееся признаком того, что массив валидаторов необходимо\n    назначить самому объекту формы, а не вложеным контролам.\n\n   'mainItems' - используется только если source является массивом. Специальное значение, являющееся признаком того,\n  что массив валидаторов необходимо назначить для всех элементов массива FormArray.\n * @param asyncKeysValidator объект Map, аналогичный keysValidator, но для асинхронных валидаторов\n * @returns объект типизированной формы - FormGroup, FormArray или FormControl в зависимости от типа значения source.\n */\nexport function makeForm<T>(\n  source: T,\n  keysValidator?: Map<ControlsNames<T>, ValidatorFn[] | null>,\n  asyncKeysValidator?: Map<ControlsNames<T>, AsyncValidatorFn[] | null>,\n): ScanFormType<T> {\n  const form = !!source && (typeof source === 'object' || typeof source === 'function') ?\n    source instanceof Array<unknown> ?\n      new FormArray(\n        source.map(\n          (item: unknown) => {\n            const itemForm = makeForm(\n              item,\n              <Map<ControlsNames<unknown>, ValidatorFn[] | null>> makeNewmainMap('mainItems', keysValidator),\n              <Map<ControlsNames<unknown>, AsyncValidatorFn[] | null>> makeNewmainMap('mainItems', asyncKeysValidator)\n            );\n            return itemForm;\n          }),\n        getValidatorsOrNull('main', keysValidator, true),\n        getValidatorsOrNull('main', asyncKeysValidator, false)\n      ) :\n      makeFormGroup<T>(source, 'main', keysValidator, asyncKeysValidator) :\n    new FormControl<T | null>(\n      !!source && typeof source == 'string' && (source.includes('0001-01-01') || source.includes('1970-01-01')) ? null : source\n      ,\n      getValidatorsOrNull('main', keysValidator, false),\n      getValidatorsOrNull('main', asyncKeysValidator, false)\n    );\n  return <ScanFormType<T>> form;\n};\n\nfunction liftErrors(control: AbstractControl): ValidationErrors | null {\n  if (control instanceof FormControl) {\n    return null;\n  } else {\n    const allControls = control instanceof FormGroup ?\n      Object.values(control.controls) :\n      control instanceof FormArray ?\n        control.controls :\n        [];\n    const invalidControls = allControls.filter(control => control.status === 'INVALID');\n    return invalidControls.length === 0 ? null : invalidControls.reduce(\n      (accumulator, current) => {\n        if (current.errors) {\n          addValidationErrors(current.errors, accumulator);\n        };\n        return accumulator;\n      }, <ValidationErrors> {}\n    );\n  }\n}\n\nexport function liftValidationErrors(control: AbstractControl): ValidationErrors | null {\n  const allControls = control instanceof FormGroup ?\n    Object.values(control.controls) :\n    control instanceof FormArray ?\n      control.controls :\n      [];\n  const invalidControls = allControls.filter(control => control.status === 'INVALID');\n  const errors: ValidationErrors = invalidControls.length === 0 ? {} : invalidControls.reduce(\n    (accumulator, current) => {\n      if (current.errors) {\n        addValidationErrors(current.errors, accumulator);\n      };\n      const innerErrors = liftValidationErrors(current);\n      if (innerErrors) {\n        addValidationErrors(innerErrors, accumulator);\n      };\n      return accumulator;\n    }, <ValidationErrors> {}\n  );\n  return Object.values(errors).length === 0 ? null : errors;\n};\n\nfunction addValidationErrors(additionErrors: ValidationErrors, currentErrors: ValidationErrors) {\n  Object.entries(additionErrors).forEach(\n    entry => currentErrors[ entry[ 0 ] ] = entry[ 1 ]\n  );\n}","/*\n * Public API Surface of ngx-extended-form-builder\n */\n\nexport * from './lib/ngx-extended-form-builder';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}