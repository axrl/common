import { FormGroup, FormArray, FormControl } from "@angular/forms";
import { Observable } from "rxjs";
function getValidatorsOrNull(key, options, addLift = false) {
    const result = options && options.has(key) ? options.get(key) : null;
    if (addLift) {
        if (result && result.validators) {
            result.validators.push(liftErrors);
            return result;
        }
        else {
            if (result) {
                result.validators = [liftErrors];
                return result;
            }
            else {
                return {
                    validators: [liftErrors]
                };
            }
            ;
        }
    }
    else {
        return result;
    }
    ;
}
function makeNewMainMap(key, oldMap) {
    if (!oldMap || key === 'main') {
        return oldMap;
    }
    else {
        if (!oldMap.has(key) && !oldMap.has(`${key}Items`)) {
            return new Map(Array.from(oldMap.entries()).filter(item => item[0] !== 'main' && item[0] !== 'mainItems').map(([entryKey, entryValue]) => [(entryKey.startsWith(`${key}.`) ? entryKey.replace(`${key}.`, '') : entryKey), entryValue]));
        }
        else {
            const filterPredicate = oldMap.has('main') ?
                oldMap.has('mainItems') ?
                    (item) => {
                        const pre = item[0] !== (key + 'Items');
                        return item[0] !== key && pre && item[0] !== 'main' && item[0] !== 'mainItems';
                    } :
                    (item) => {
                        const pre = item[0] !== (key + 'Items');
                        return item[0] !== key && key[0] !== (key + 'Items') && item[0] !== 'main';
                    } :
                oldMap.has('mainItems') ?
                    (item) => {
                        const pre = item[0] !== (key + 'Items');
                        return item[0] !== key && pre && item[0] !== 'mainItems';
                    } :
                    (item) => {
                        const pre = item[0] !== (key + 'Items');
                        return item[0] !== key && pre;
                    };
            const newMainValidatorsArray = oldMap.has(key) ?
                oldMap.has(`${key}Items`) ?
                    [
                        ['main', oldMap.get(key)],
                        ['mainItems', oldMap.get(`${key}Items`)]
                    ] :
                    [
                        ['main', oldMap.get(key)],
                    ] :
                oldMap.has(`${key}Items`) ?
                    [
                        ['mainItems', oldMap.get(`${key}Items`)]
                    ] :
                    [];
            const filtered = Array.from(oldMap.entries()).filter(filterPredicate);
            const result = new Map([
                ...newMainValidatorsArray,
                ...filtered.map(([entryKey, entryValue]) => [(entryKey.startsWith(`${key}.`) ?
                        entryKey.replace(`${key}.`, '') :
                        entryKey.startsWith(`${key}Items.`) ?
                            entryKey.replace(`${key}Items.`, '') :
                            entryKey), entryValue])
            ]);
            return result;
        }
        ;
    }
    ;
}
/**
@function makeForm<T>
  Фабричная функция для создания Angular Reactive Form.
В отличие от стандартного FormBuilder - а в пакете @angular/forms, при создании формы из сложных объектов,
сохраняется вложенность контролов - каждый вложенный объект превращается во вложенную FormGroup,
  обычные свойства объектов становятся FormControl - ами, а массивы - FormArray - ми.
При этом создаваемая форма имеет более строгую типизацию.

  ВАЖНО!
   Чтобы избежать ошибки переполнения стэка вызовов в рекурсивном процессе создания формы, для любых;
Observable - значений(в т.ч., к примеру, Subject * и EventEmitter) соответствующий элемент формы не создается.
 * @param source  источник данных типа T для создания формы.
 * @param keysValidator объект Map с конфигурацией синхронных валидаторов контролов формы.
 * В качестве ключей могут быть указаны следующие значения:
 *  PropertyesKeys<T> - строковые ключи в типе T, включая строковые ключи всех вложенных типов, разделенные "." - точкой.
    Например имеется такой тип:
    ```ts
                    interface User {
                      firstname: string;
                      lastname: string;
                      phone:  {
                        code: string;
                        number: string;
                        }
                      };
    ```
    Для формы, которая будет создана из объекта User в конфигурации валидаторов названия контролов можно будет указать так:
    `lastname` или`phone`, или`phone.code`.

   'main' - специальное значение, являющееся признаком того, что массив валидаторов необходимо
    назначить самому объекту формы, а не вложеным контролам.

   'mainItems' - используется только если source является массивом. Специальное значение, являющееся признаком того,
  что массив валидаторов необходимо назначить для всех элементов массива FormArray.
 * @param asyncKeysValidator объект Map, аналогичный keysValidator, но для асинхронных валидаторов
 * @returns объект типизированной формы - FormGroup, FormArray или FormControl в зависимости от типа значения source.
 */
export function makeForm(source, options) {
    const form = !!source && (typeof source === 'object' || typeof source === 'function') ?
        source instanceof (Array) ?
            makeArray(source, options) :
            makeGroup(source, 'main', options) :
        makeControl(source, options);
    return form;
}
;
function liftErrors(control) {
    if (control instanceof FormControl) {
        return null;
    }
    else {
        const allControls = control instanceof FormGroup ?
            Object.values(control.controls) :
            control instanceof FormArray ?
                control.controls :
                [];
        const invalidControls = allControls.filter(control => control.status === 'INVALID');
        return invalidControls.length === 0 ? null : invalidControls.reduce((accumulator, current) => {
            if (current.errors) {
                addValidationErrors(current.errors, accumulator);
            }
            ;
            return accumulator;
        }, {});
    }
}
export function liftValidationErrors(control) {
    const allControls = control instanceof FormGroup ?
        Object.values(control.controls) :
        control instanceof FormArray ?
            control.controls :
            [];
    const invalidControls = allControls.filter(control => control.status === 'INVALID');
    const errors = invalidControls.length === 0 ? {} : invalidControls.reduce((accumulator, current) => {
        if (current.errors) {
            addValidationErrors(current.errors, accumulator);
        }
        ;
        const innerErrors = liftValidationErrors(current);
        if (innerErrors) {
            addValidationErrors(innerErrors, accumulator);
        }
        ;
        return accumulator;
    }, {});
    return Object.values(errors).length === 0 ? null : errors;
}
;
function addValidationErrors(additionErrors, currentErrors) {
    Object.entries(additionErrors).forEach(entry => currentErrors[entry[0]] = entry[1]);
}
function makeControl(source, options) {
    const controlOptions = getValidatorsOrNull('main', options, false);
    const result = source instanceof FormControl ?
        source :
        new FormControl(!!source && typeof source == 'string' && (source.includes('0001-01-01') || source.includes('1970-01-01')) ? null : source, {
            validators: controlOptions?.validators,
            asyncValidators: controlOptions?.asyncValidators,
            updateOn: controlOptions?.updateOn,
            nonNullable: controlOptions?.nonNullable
        });
    if (controlOptions?.disabled) {
        result.disable();
    }
    ;
    return result;
}
function makeGroup(source, internalKey, options) {
    const controlOptions = getValidatorsOrNull(internalKey, options, false);
    const result = source instanceof (FormGroup) ?
        source :
        Object.entries(source).reduce((accumulator, entry) => {
            const key = entry[0];
            const value = entry[1];
            if (!(value instanceof Observable)) {
                accumulator.addControl(key, !!value && (value instanceof FormGroup || value instanceof FormArray || value instanceof FormControl) ?
                    value :
                    makeForm(value, makeNewMainMap(key, options)));
            }
            ;
            return accumulator;
        }, new FormGroup({}, {
            validators: controlOptions?.validators,
            asyncValidators: controlOptions?.asyncValidators,
            updateOn: controlOptions?.updateOn,
        }));
    if (controlOptions?.disabled) {
        result.disable();
    }
    ;
    return result;
}
function makeArray(source, options) {
    const controlOptions = getValidatorsOrNull('main', options, false);
    const result = source instanceof FormArray ?
        source :
        new FormArray(source.map((item) => {
            const itemForm = makeForm(item, makeNewMainMap('mainItems', options));
            return itemForm;
        }), {
            validators: controlOptions?.validators,
            asyncValidators: controlOptions?.asyncValidators,
            updateOn: controlOptions?.updateOn
        });
    if (controlOptions?.disabled) {
        result.disable();
    }
    ;
    return result;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWV4dGVuZGVkLWZvcm0tYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL25neC1leHRlbmRlZC1mb3JtLWJ1aWxkZXIvc3JjL2xpYi9uZ3gtZXh0ZW5kZWQtZm9ybS1idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRW5FLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFzRWxDLFNBQVMsbUJBQW1CLENBQzFCLEdBQXFCLEVBQ3JCLE9BQW1ELEVBQ25ELFVBQW1CLEtBQUs7SUFFeEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNyRSxJQUFJLE9BQU8sRUFBRTtRQUNYLElBQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDL0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQWUsVUFBVSxDQUFDLENBQUM7WUFDakQsT0FBTyxNQUFNLENBQUM7U0FDZjthQUFNO1lBQ0wsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsTUFBTSxDQUFDLFVBQVUsR0FBRyxDQUFFLFVBQVUsQ0FBRSxDQUFDO2dCQUNuQyxPQUFPLE1BQU0sQ0FBQzthQUNmO2lCQUFNO2dCQUNMLE9BQU87b0JBQ0wsVUFBVSxFQUFFLENBQUUsVUFBVSxDQUFFO2lCQUMzQixDQUFDO2FBQ0g7WUFBQSxDQUFDO1NBQ0g7S0FDRjtTQUFNO1FBQ0wsT0FBTyxNQUFNLENBQUM7S0FDZjtJQUFBLENBQUM7QUFDSixDQUFDO0FBRUQsU0FBUyxjQUFjLENBQ3JCLEdBQXFCLEVBQ3JCLE1BQWtEO0lBRWxELElBQUks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QUFRO1NBQ25DLENBQ0YsQ0FDRixDQUFDO0lBQ0osSUFBSSxjQUFjLEVBQUUsUUFBUSxFQUFFO1FBQzVCLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQztLQUNsQjtJQUFBLENBQUM7SUFDRixPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQ2hCLE1BQXdDLEVBQ3hDLE9BQW1EO0lBRW5ELE1BQU0sY0FBYyxHQUFHLG1CQUFtQixDQUFvQixNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3RGLE1BQU0sTUFBTSxHQUFHLE1BQU0sWUFBWSxTQUFTLENBQUMsQ0FBQztRQUMxQyxNQUFNLENBQUMsQ0FBQztRQUNSLElBQUksU0FBUyxDQUNYLE1BQU0sQ0FBQyxHQUFHLENBQ1IsQ0FBQyxJQUFPLEVBQUUsRUFBRTtZQUNWLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FDdkIsSUFBSSxFQUNKLGNBQWMsQ0FBMEIsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUM5RCxDQUFDO1lBQ0YsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxDQUFDLEVBQ0o7WUFDRSxVQUFVLEVBQUUsY0FBYyxFQUFFLFVBQVU7WUFDdEMsZUFBZSxFQUFFLGNBQWMsRUFBRSxlQUFlO1lBQ2hELFFBQVEsRUFBRSxjQUFjLEVBQUUsUUFBUTtTQUNuQyxDQUNGLENBQUM7SUFDSixJQUFJLGNBQWMsRUFBRSxRQUFRLEVBQUU7UUFDNUIsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO0tBQ2xCO0lBQUEsQ0FBQztJQUNGLE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAsIEZvcm1BcnJheSwgRm9ybUNvbnRyb2wgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHR5cGUgeyBWYWxpZGF0b3JGbiwgVmFsaWRhdGlvbkVycm9ycywgQXN5bmNWYWxpZGF0b3JGbiwgQWJzdHJhY3RDb250cm9sLCBGb3JtQ29udHJvbE9wdGlvbnMgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcblxyXG4vKipcclxuICog0JLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3QsNGPINGD0YLQuNC70LjRgtCwINGC0LjQv9CwLlxyXG4gKiDQndCwINCy0YXQvtC0INC/0YDQuNC90LjQvNCw0LXRgiDQvdC10LrQuNC5INGC0LjQvyBULCDQstC+0LfQstGA0LDRidCw0LXRgiDRgdC/0LjRgdC+0Log0YLQvtC70YzQutC+INGB0YLRgNC+0LrQvtCy0YvRhSDQutC70Y7Rh9C10Lkg0Y3RgtC+0LPQviDRgtC40L/QsCwg0L/RgNC4INGN0YLQvtC8INC30L3QsNGH0LXQvdC40Y8g0Y3RgtC40YUg0LrQu9GO0YfQtdC5INC90LUg0Y/QstC70Y/RjtGC0YHRjyBPYnNlcnZhYmxlLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU3RyaW5nS2V5czxUPiA9IHtcclxuICBbIEsgaW4ga2V5b2YgVCBdOiBUWyBLIF0gZXh0ZW5kcyBPYnNlcnZhYmxlPHVua25vd24+ID9cclxuICBuZXZlciA6XHJcbiAgSyBleHRlbmRzIHN0cmluZyA/XHJcbiAgSyA6IG5ldmVyO1xyXG59WyBrZXlvZiBUIF07XHJcblxyXG4vKipcclxuICog0JLRgdC/0L7QvNC+0LPQsNGC0LXQu9GM0L3Ri9C5IGFsaWFzLdGC0LjQvyDQutC70Y7Rh9C10Lkg0LIg0L7QsdGK0LXQutGC0LUgTWFwLCDRgdC+0LTQtdGA0LbQsNGJ0LXQvCDQutC+0L3RhNC40LPRg9GA0LDRhtC40Y4g0LLQsNC70LjQtNCw0YLQvtGA0L7QsiDQutC+0L3RgtGA0L7Qu9C+0LIuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBDb250cm9sc05hbWVzPFQ+ID0gVCBleHRlbmRzIE9ic2VydmFibGU8dW5rbm93bj4gP1xyXG4gIG5ldmVyIDpcclxuICBUIGV4dGVuZHMgQXJyYXk8aW5mZXIgVT4gP1xyXG4gICdtYWluJyB8ICdtYWluSXRlbXMnIHwgYG1haW5JdGVtcy4keyBQcm9wZXJ0eWVzS2V5czxVPiB9YCA6XHJcbiAgJ21haW4nIHwgUHJvcGVydHllc0tleXM8VD47XHJcbi8qKlxyXG4gKiDQktGB0L/QvtC80L7Qs9Cw0YLQtdC70YzQvdCw0Y8g0YPRgtC40LvQuNGC0LAg0YLQuNC/0LAuXHJcbiAqINCd0LAg0LLRhdC+0LQg0L/RgNC40L3QuNC80LDQtdGCINC90LXQutC40Lkg0YLQuNC/IFQsINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINGC0L7Qu9GM0LrQviDRgdGC0YDQvtC60L7QstGL0LUg0LrQu9GO0YfQuCDRjdGC0L7Qs9C+INGC0LjQv9CwLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgUHJvcGVydHllc0tleXM8VD4gPSBUIGV4dGVuZHMgdW5kZWZpbmVkIHwgbnVsbCB8IG51bWJlciB8IGJvb2xlYW4gfCBzeW1ib2wgfCBPYnNlcnZhYmxlPHVua25vd24+ID9cclxuICBuZXZlciA6XHJcbiAgVCBleHRlbmRzIHN0cmluZyA/XHJcbiAgVCA6XHJcbiAgVCBleHRlbmRzIEFycmF5PGluZmVyIFU+ID9cclxuICBQcm9wZXJ0eWVzS2V5czxVPiA6XHJcbiAge1xyXG4gICAgWyBLIGluIGtleW9mIFQgXS0/OiBLIGV4dGVuZHMgc3RyaW5nID9cclxuICAgIFRbIEsgXSBleHRlbmRzIChzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgc3ltYm9sIHwgdW5kZWZpbmVkIHwgbnVsbCkgP1xyXG4gICAgSyA6XHJcbiAgICBUWyBLIF0gZXh0ZW5kcyBPYnNlcnZhYmxlPHVua25vd24+ID9cclxuICAgIG5ldmVyIDpcclxuICAgIFRbIEsgXSBleHRlbmRzIEFycmF5PGluZmVyIFU+ID9cclxuICAgIGAkeyBLIH1JdGVtcy4keyBQcm9wZXJ0eWVzS2V5czxVPiB9YCB8IGAkeyBLIH1JdGVtc2AgfCBLIDpcclxuICAgIGAkeyBLIH0uJHsgUHJvcGVydHllc0tleXM8VFsgSyBdPiB9YCB8IEsgOiBuZXZlclxyXG4gIH1bIGtleW9mIFQgXTtcclxuLyoqXHJcbiAqINCj0L/RgNC+0YnQtdC90L3QsNGPINC30LDQv9C40YHRjCDQtNC70Y8g0YLQuNC/0LAg0L7QsdGK0LXQutGC0LAgRm9ybUdyb3VwLCDQvtCx0YDQsNC30L7QstCw0L3QvdC+0LPQviDQuNC3INGC0LjQv9CwIFQuXHJcbiAqL1xyXG5leHBvcnQgdHlwZSBGb3JtR3JvdXBUeXBlPFQ+ID0gRm9ybUdyb3VwPHsgWyBLIGluIFN0cmluZ0tleXM8VD4gXTogU2NhbkZvcm1UeXBlPFRbIEsgXT47IH0+O1xyXG5cclxuLyoqXHJcbiAqINCj0L3QuNCy0LXRgNGB0LDQu9GM0L3Ri9C5INGC0LjQvy3Rg9GC0LjQu9C40YLQsC5cclxuICog0JTQu9GPINC70Y7QsdC+0LPQviDRgtC40L/QsCDQoiDQstGL0LLQvtC00LjRgiDQv9GA0LDQstC40LvRjNC90YvQuSDRgtC40L8g0YHQvtC30LTQsNCy0LDQtdC80L7QuSDRhNC+0YDQvNGLLCDQstC60LvRjtGH0LDRjyDQu9GO0LHQvtC5INGD0YDQvtCy0LXQvdGMINCy0LvQvtC20LXQvdC90L7RgdGC0LguXHJcbiAqINCS0JDQltCd0J4hXHJcbiAqINCn0YLQvtCx0Ysg0LjQt9Cx0LXQttCw0YLRjCDQvtGI0LjQsdC60Lgg0L/QtdGA0LXQv9C+0LvQvdC10L3QuNGPINGB0YLRjdC60LAg0LLRi9C30L7QstC+0LIg0LIg0YDQtdC60YPRgNGB0LjQstC90L7QvCDQv9GA0L7RhtC10YHRgdC1INGB0L7Qt9C00LDQvdC40Y8g0YTQvtGA0LzRiywg0LTQu9GPINC70Y7QsdGL0YVcclxuICogT2JzZXJ2YWJsZS3Qt9C90LDRh9C10L3QuNC5ICgg0LIg0YIu0YcuLCDQuiDQv9GA0LjQvNC10YDRgywgU3ViamVjdCAgKiDQuCBFdmVudEVtaXR0ZXIpINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LjQuSDRjdC70LXQvNC10L3RgiDRhNC+0YDQvNGLINC90LUg0YHQvtC30LTQsNC10YLRgdGPLlxyXG4gKiBTY2FuRm9ybVR5cGUg0Y3RgtC+INGC0LDQutC20LUg0YPRh9C40YLRi9Cy0LDQtdGCLlxyXG4gKi9cclxuZXhwb3J0IHR5cGUgU2NhbkZvcm1UeXBlPFQ+ID0gVCBleHRlbmRzIEFic3RyYWN0Q29udHJvbCA/XHJcbiAgVCA6XHJcbiAgVCBleHRlbmRzIG51bGwgfCB1bmRlZmluZWQgP1xyXG4gIG5ldmVyIDpcclxuICBUIGV4dGVuZHMgQXJyYXk8aW5mZXIgVT4gP1xyXG4gIEZvcm1BcnJheTxTY2FuRm9ybVR5cGU8VT4+IDpcclxuICBUIGV4dGVuZHMgKHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gfCBzeW1ib2wgfCBudWxsIHwgdW5kZWZpbmVkKSA/XHJcbiAgRm9ybUNvbnRyb2w8VD4gOlxyXG4gIEZvcm1Hcm91cFR5cGU8VD47XHJcblxyXG50eXBlIE1ha2VDb250cm9sT3B0aW9ucyA9IE9taXQ8Rm9ybUNvbnRyb2xPcHRpb25zLCAndmFsaWRhdG9ycycgfCAnYXN5bmNWYWxpZGF0b3JzJz4gJiB7XHJcbiAgZGlzYWJsZWQ/OiBib29sZWFuO1xyXG4gIHZhbGlkYXRvcnM/OiBWYWxpZGF0b3JGbltdO1xyXG4gIGFzeW5jVmFsaWRhdG9ycz86IEFzeW5jVmFsaWRhdG9yRm5bXTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGdldFZhbGlkYXRvcnNPck51bGw8VD4oXHJcbiAga2V5OiBDb250cm9sc05hbWVzPFQ+LFxyXG4gIG9wdGlvbnM/OiBNYXA8Q29udHJvbHNOYW1lczxUPiwgTWFrZUNvbnRyb2xPcHRpb25zPixcclxuICBhZGRMaWZ0OiBib29sZWFuID0gZmFsc2VcclxuKTogTWFrZUNvbnRyb2xPcHRpb25zIHwgbnVsbCB8IHVuZGVmaW5lZCB7XHJcbiAgY29uc3QgcmVzdWx0ID0gb3B0aW9ucyAmJiBvcHRpb25zLmhhcyhrZXkpID8gb3B0aW9ucy5nZXQoa2V5KSA6IG51bGw7XHJcbiAgaWYgKGFkZExpZnQpIHtcclxuICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0LnZhbGlkYXRvcnMpIHtcclxuICAgICAgcmVzdWx0LnZhbGlkYXRvcnMucHVzaCg8VmFsaWRhdG9yRm4+IGxpZnRFcnJvcnMpO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgIHJlc3VsdC52YWxpZGF0b3JzID0gWyBsaWZ0RXJyb3JzIF07XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdmFsaWRhdG9yczogWyBsaWZ0RXJyb3JzIF1cclxuICAgICAgICB9O1xyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1ha2VOZXdNYWluTWFwPEksIE8+KFxyXG4gIGtleTogQ29udHJvbHNOYW1lczxJPixcclxuICBvbGRNYXA/OiBNYXA8Q29udHJvbHNOYW1lczxJPiwgTWFrZUNvbnRyb2xPcHRpb25zPixcclxuKTogTWFwPENvbnRyb2xzTmFtZXM8Tz4sIE1ha2VDb250cm9sT3B0aW9ucz4gfCB1bmRlZmluZWQge1xyXG4gIGlmICghb2xkTWFwIHx8IGtleSA9PT0gJ21haW4nKSB7XHJcbiAgICByZXR1cm4gPE1hcDxDb250cm9sc05hbWVzPE8+LCBNYWtlQ29udHJvbE9wdGlvbnM+IHwgdW5kZWZpbmVkPiBvbGRNYXA7XHJcbiAgfSBlbHNlIHtcclxuICAgIGlmICghb2xkTWFwLmhhcyhrZXkpICYmICFvbGRNYXAuaGFzKDxDb250cm9sc05hbWVzPEk+PiBgJHsga2V5IH1JdGVtc2ApKSB7XHJcbiAgICAgIHJldHVybiBuZXcgTWFwPENvbnRyb2xzTmFtZXM8Tz4sIE1ha2VDb250cm9sT3B0aW9ucz4oXHJcbiAgICAgICAgQXJyYXkuZnJvbShcclxuICAgICAgICAgIG9sZE1hcC5lbnRyaWVzKClcclxuICAgICAgICApLmZpbHRlcihcclxuICAgICAgICAgIGl0ZW0gPT4gaXRlbVsgMCBdICE9PSAnbWFpbicgJiYgaXRlbVsgMCBdICE9PSAnbWFpbkl0ZW1zJ1xyXG4gICAgICAgICkubWFwKFxyXG4gICAgICAgICAgKFsgZW50cnlLZXksIGVudHJ5VmFsdWUgXSkgPT4gWyA8Q29udHJvbHNOYW1lczxPPj4oZW50cnlLZXkuc3RhcnRzV2l0aChgJHsga2V5IH0uYCkgPyBlbnRyeUtleS5yZXBsYWNlKGAkeyBrZXkgfS5gLCAnJykgOiBlbnRyeUtleSksIGVudHJ5VmFsdWUgXVxyXG4gICAgICAgIClcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGZpbHRlclByZWRpY2F0ZSA9IG9sZE1hcC5oYXMoPENvbnRyb2xzTmFtZXM8ST4+ICdtYWluJykgP1xyXG4gICAgICAgIG9sZE1hcC5oYXMoPENvbnRyb2xzTmFtZXM8ST4+ICdtYWluSXRlbXMnKSA/XHJcbiAgICAgICAgICAoaXRlbTogWyBDb250cm9sc05hbWVzPEk+LCBNYWtlQ29udHJvbE9wdGlvbnMgXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBpdGVtWyAwIF0gIT09IChrZXkgKyAnSXRlbXMnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1bIDAgXSAhPT0ga2V5ICYmIHByZSAmJiBpdGVtWyAwIF0gIT09ICdtYWluJyAmJiBpdGVtWyAwIF0gIT09ICdtYWluSXRlbXMnO1xyXG4gICAgICAgICAgfSA6XHJcbiAgICAgICAgICAoaXRlbTogWyBDb250cm9sc05hbWVzPEk+LCBNYWtlQ29udHJvbE9wdGlvbnMgXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcmUgPSBpdGVtWyAwIF0gIT09IChrZXkgKyAnSXRlbXMnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1bIDAgXSAhPT0ga2V5ICYmIGtleVsgMCBdICE9PSAoa2V5ICsgJ0l0ZW1zJykgJiYgaXRlbVsgMCBdICE9PSAnbWFpbic7XHJcbiAgICAgICAgICB9IDpcclxuICAgICAgICBvbGRNYXAuaGFzKDxDb250cm9sc05hbWVzPEk+PiAnbWFpbkl0ZW1zJykgP1xyXG4gICAgICAgICAgKGl0ZW06IFsgQ29udHJvbHNOYW1lczxJPiwgTWFrZUNvbnRyb2xPcHRpb25zIF0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlID0gaXRlbVsgMCBdICE9PSAoa2V5ICsgJ0l0ZW1zJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtWyAwIF0gIT09IGtleSAmJiBwcmUgJiYgaXRlbVsgMCBdICE9PSAnbWFpbkl0ZW1zJztcclxuICAgICAgICAgIH0gOlxyXG4gICAgICAgICAgKGl0ZW06IFsgQ29udHJvbHNOYW1lczxJPiwgTWFrZUNvbnRyb2xPcHRpb25zIF0pID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlID0gaXRlbVsgMCBdICE9PSAoa2V5ICsgJ0l0ZW1zJyk7XHJcbiAgICAgICAgICAgIHJldHVybiBpdGVtWyAwIF0gIT09IGtleSAmJiBwcmU7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICBjb25zdCBuZXdNYWluVmFsaWRhdG9yc0FycmF5OiBbIENvbnRyb2xzTmFtZXM8Tz4sIE1ha2VDb250cm9sT3B0aW9ucyBdW10gPSBvbGRNYXAuaGFzKGtleSkgP1xyXG4gICAgICAgIG9sZE1hcC5oYXMoPENvbnRyb2xzTmFtZXM8ST4+IGAkeyBrZXkgfUl0ZW1zYCkgP1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBbIDxDb250cm9sc05hbWVzPE8+PiAnbWFpbicsIG9sZE1hcC5nZXQoa2V5KSEgXSxcclxuICAgICAgICAgICAgWyA8Q29udHJvbHNOYW1lczxPPj4gJ21haW5JdGVtcycsIG9sZE1hcC5nZXQoPENvbnRyb2xzTmFtZXM8ST4+IGAkeyBrZXkgfUl0ZW1zYCkhIF1cclxuICAgICAgICAgIF0gOlxyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBbIDxDb250cm9sc05hbWVzPE8+PiAnbWFpbicsIG9sZE1hcC5nZXQoa2V5KSEgXSxcclxuICAgICAgICAgIF0gOlxyXG4gICAgICAgIG9sZE1hcC5oYXMoPENvbnRyb2xzTmFtZXM8ST4+IGAkeyBrZXkgfUl0ZW1zYCkgP1xyXG4gICAgICAgICAgW1xyXG4gICAgICAgICAgICBbIDxDb250cm9sc05hbWVzPE8+PiAnbWFpbkl0ZW1zJywgb2xkTWFwLmdldCg8Q29udHJvbHNOYW1lczxJPj4gYCR7IGtleSB9SXRlbXNgKSEgXVxyXG4gICAgICAgICAgXSA6XHJcbiAgICAgICAgICBbXTtcclxuICAgICAgY29uc3QgZmlsdGVyZWQgPSBBcnJheS5mcm9tKFxyXG4gICAgICAgIG9sZE1hcC5lbnRyaWVzKClcclxuICAgICAgKS5maWx0ZXIoZmlsdGVyUHJlZGljYXRlKTtcclxuICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcDxDb250cm9sc05hbWVzPE8+LCBNYWtlQ29udHJvbE9wdGlvbnM+KFtcclxuICAgICAgICAuLi5uZXdNYWluVmFsaWRhdG9yc0FycmF5LFxyXG4gICAgICAgIC4uLmZpbHRlcmVkLm1hcDxbIENvbnRyb2xzTmFtZXM8Tz4sIE1ha2VDb250cm9sT3B0aW9ucyBdPihcclxuICAgICAgICAgIChbIGVudHJ5S2V5LCBlbnRyeVZhbHVlIF0pID0+IFsgPENvbnRyb2xzTmFtZXM8Tz4+KFxyXG4gICAgICAgICAgICBlbnRyeUtleS5zdGFydHNXaXRoKGAkeyBrZXkgfS5gKSA/XHJcbiAgICAgICAgICAgICAgZW50cnlLZXkucmVwbGFjZShgJHsga2V5IH0uYCwgJycpIDpcclxuICAgICAgICAgICAgICBlbnRyeUtleS5zdGFydHNXaXRoKGAkeyBrZXkgfUl0ZW1zLmApID9cclxuICAgICAgICAgICAgICAgIGVudHJ5S2V5LnJlcGxhY2UoYCR7IGtleSB9SXRlbXMuYCwgJycpIDpcclxuICAgICAgICAgICAgICAgIGVudHJ5S2V5XHJcbiAgICAgICAgICApLCBlbnRyeVZhbHVlIF1cclxuICAgICAgICApXHJcbiAgICAgIF0pO1xyXG4gICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfTtcclxuICB9O1xyXG59XHJcblxyXG4vKipcclxuQGZ1bmN0aW9uIG1ha2VGb3JtPFQ+XHJcbiAg0KTQsNCx0YDQuNGH0L3QsNGPINGE0YPQvdC60YbQuNGPINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPIEFuZ3VsYXIgUmVhY3RpdmUgRm9ybS5cclxu0JIg0L7RgtC70LjRh9C40LUg0L7RgiDRgdGC0LDQvdC00LDRgNGC0L3QvtCz0L4gRm9ybUJ1aWxkZXIgLSDQsCDQsiDQv9Cw0LrQtdGC0LUgQGFuZ3VsYXIvZm9ybXMsINC/0YDQuCDRgdC+0LfQtNCw0L3QuNC4INGE0L7RgNC80Ysg0LjQtyDRgdC70L7QttC90YvRhSDQvtCx0YrQtdC60YLQvtCyLFxyXG7RgdC+0YXRgNCw0L3Rj9C10YLRgdGPINCy0LvQvtC20LXQvdC90L7RgdGC0Ywg0LrQvtC90YLRgNC+0LvQvtCyIC0g0LrQsNC20LTRi9C5INCy0LvQvtC20LXQvdC90YvQuSDQvtCx0YrQtdC60YIg0L/RgNC10LLRgNCw0YnQsNC10YLRgdGPINCy0L4g0LLQu9C+0LbQtdC90L3Rg9GOIEZvcm1Hcm91cCxcclxuICDQvtCx0YvRh9C90YvQtSDRgdCy0L7QudGB0YLQstCwINC+0LHRitC10LrRgtC+0LIg0YHRgtCw0L3QvtCy0Y/RgtGB0Y8gRm9ybUNvbnRyb2wgLSDQsNC80LgsINCwINC80LDRgdGB0LjQstGLIC0gRm9ybUFycmF5IC0g0LzQuC5cclxu0J/RgNC4INGN0YLQvtC8INGB0L7Qt9C00LDQstCw0LXQvNCw0Y8g0YTQvtGA0LzQsCDQuNC80LXQtdGCINCx0L7Qu9C10LUg0YHRgtGA0L7Qs9GD0Y4g0YLQuNC/0LjQt9Cw0YbQuNGOLlxyXG5cclxuICDQktCQ0JbQndCeIVxyXG4gICDQp9GC0L7QsdGLINC40LfQsdC10LbQsNGC0Ywg0L7RiNC40LHQutC4INC/0LXRgNC10L/QvtC70L3QtdC90LjRjyDRgdGC0Y3QutCwINCy0YvQt9C+0LLQvtCyINCyINGA0LXQutGD0YDRgdC40LLQvdC+0Lwg0L/RgNC+0YbQtdGB0YHQtSDRgdC+0LfQtNCw0L3QuNGPINGE0L7RgNC80YssINC00LvRjyDQu9GO0LHRi9GFO1xyXG5PYnNlcnZhYmxlIC0g0LfQvdCw0YfQtdC90LjQuSjQsiDRgi7Rhy4sINC6INC/0YDQuNC80LXRgNGDLCBTdWJqZWN0ICog0LggRXZlbnRFbWl0dGVyKSDRgdC+0L7RgtCy0LXRgtGB0YLQstGD0Y7RidC40Lkg0Y3Qu9C10LzQtdC90YIg0YTQvtGA0LzRiyDQvdC1INGB0L7Qt9C00LDQtdGC0YHRjy5cclxuICogQHBhcmFtIHNvdXJjZSAg0LjRgdGC0L7Rh9C90LjQuiDQtNCw0L3QvdGL0YUg0YLQuNC/0LAgVCDQtNC70Y8g0YHQvtC30LTQsNC90LjRjyDRhNC+0YDQvNGLLlxyXG4gKiBAcGFyYW0ga2V5c1ZhbGlkYXRvciDQvtCx0YrQtdC60YIgTWFwINGBINC60L7QvdGE0LjQs9GD0YDQsNGG0LjQtdC5INGB0LjQvdGF0YDQvtC90L3Ri9GFINCy0LDQu9C40LTQsNGC0L7RgNC+0LIg0LrQvtC90YLRgNC+0LvQvtCyINGE0L7RgNC80YsuXHJcbiAqINCSINC60LDRh9C10YHRgtCy0LUg0LrQu9GO0YfQtdC5INC80L7Qs9GD0YIg0LHRi9GC0Ywg0YPQutCw0LfQsNC90Ysg0YHQu9C10LTRg9GO0YnQuNC1INC30L3QsNGH0LXQvdC40Y86XHJcbiAqICBQcm9wZXJ0eWVzS2V5czxUPiAtINGB0YLRgNC+0LrQvtCy0YvQtSDQutC70Y7Rh9C4INCyINGC0LjQv9C1IFQsINCy0LrQu9GO0YfQsNGPINGB0YLRgNC+0LrQvtCy0YvQtSDQutC70Y7Rh9C4INCy0YHQtdGFINCy0LvQvtC20LXQvdC90YvRhSDRgtC40L/QvtCyLCDRgNCw0LfQtNC10LvQtdC90L3Ri9C1IFwiLlwiIC0g0YLQvtGH0LrQvtC5LlxyXG4gICAg0J3QsNC/0YDQuNC80LXRgCDQuNC80LXQtdGC0YHRjyDRgtCw0LrQvtC5INGC0LjQvzpcclxuICAgIGBgYHRzXHJcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlIFVzZXIge1xyXG4gICAgICAgICAgICAgICAgICAgICAgZmlyc3RuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICBsYXN0bmFtZTogc3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgcGhvbmU6ICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IHN0cmluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiBzdHJpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICBgYGBcclxuICAgINCU0LvRjyDRhNC+0YDQvNGLLCDQutC+0YLQvtGA0LDRjyDQsdGD0LTQtdGCINGB0L7Qt9C00LDQvdCwINC40Lcg0L7QsdGK0LXQutGC0LAgVXNlciDQsiDQutC+0L3RhNC40LPRg9GA0LDRhtC40Lgg0LLQsNC70LjQtNCw0YLQvtGA0L7QsiDQvdCw0LfQstCw0L3QuNGPINC60L7QvdGC0YDQvtC70L7QsiDQvNC+0LbQvdC+INCx0YPQtNC10YIg0YPQutCw0LfQsNGC0Ywg0YLQsNC6OlxyXG4gICAgYGxhc3RuYW1lYCDQuNC70LhgcGhvbmVgLCDQuNC70LhgcGhvbmUuY29kZWAuXHJcblxyXG4gICAnbWFpbicgLSDRgdC/0LXRhtC40LDQu9GM0L3QvtC1INC30L3QsNGH0LXQvdC40LUsINGP0LLQu9GP0Y7RidC10LXRgdGPINC/0YDQuNC30L3QsNC60L7QvCDRgtC+0LPQviwg0YfRgtC+INC80LDRgdGB0LjQsiDQstCw0LvQuNC00LDRgtC+0YDQvtCyINC90LXQvtCx0YXQvtC00LjQvNC+XHJcbiAgICDQvdCw0LfQvdCw0YfQuNGC0Ywg0YHQsNC80L7QvNGDINC+0LHRitC10LrRgtGDINGE0L7RgNC80YssINCwINC90LUg0LLQu9C+0LbQtdC90YvQvCDQutC+0L3RgtGA0L7Qu9Cw0LwuXHJcblxyXG4gICAnbWFpbkl0ZW1zJyAtINC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyDRgtC+0LvRjNC60L4g0LXRgdC70Lggc291cmNlINGP0LLQu9GP0LXRgtGB0Y8g0LzQsNGB0YHQuNCy0L7QvC4g0KHQv9C10YbQuNCw0LvRjNC90L7QtSDQt9C90LDRh9C10L3QuNC1LCDRj9Cy0LvRj9GO0YnQtdC10YHRjyDQv9GA0LjQt9C90LDQutC+0Lwg0YLQvtCz0L4sXHJcbiAg0YfRgtC+INC80LDRgdGB0LjQsiDQstCw0LvQuNC00LDRgtC+0YDQvtCyINC90LXQvtCx0YXQvtC00LjQvNC+INC90LDQt9C90LDRh9C40YLRjCDQtNC70Y8g0LLRgdC10YUg0Y3Qu9C10LzQtdC90YLQvtCyINC80LDRgdGB0LjQstCwIEZvcm1BcnJheS5cclxuICogQHBhcmFtIGFzeW5jS2V5c1ZhbGlkYXRvciDQvtCx0YrQtdC60YIgTWFwLCDQsNC90LDQu9C+0LPQuNGH0L3Ri9C5IGtleXNWYWxpZGF0b3IsINC90L4g0LTQu9GPINCw0YHQuNC90YXRgNC+0L3QvdGL0YUg0LLQsNC70LjQtNCw0YLQvtGA0L7QslxyXG4gKiBAcmV0dXJucyDQvtCx0YrQtdC60YIg0YLQuNC/0LjQt9C40YDQvtCy0LDQvdC90L7QuSDRhNC+0YDQvNGLIC0gRm9ybUdyb3VwLCBGb3JtQXJyYXkg0LjQu9C4IEZvcm1Db250cm9sINCyINC30LDQstC40YHQuNC80L7RgdGC0Lgg0L7RgiDRgtC40L/QsCDQt9C90LDRh9C10L3QuNGPIHNvdXJjZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlRm9ybTxUIGV4dGVuZHMgdW5rbm93bj4oXHJcbiAgc291cmNlOiBULFxyXG4gIG9wdGlvbnM/OiBNYXA8Q29udHJvbHNOYW1lczxUPiwgTWFrZUNvbnRyb2xPcHRpb25zPixcclxuKTogU2NhbkZvcm1UeXBlPFQ+IHtcclxuICBjb25zdCBmb3JtID0gISFzb3VyY2UgJiYgKHR5cGVvZiBzb3VyY2UgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicpID9cclxuICAgIHNvdXJjZSBpbnN0YW5jZW9mIEFycmF5PHVua25vd24+ID9cclxuICAgICAgbWFrZUFycmF5KHNvdXJjZSwgb3B0aW9ucykgOlxyXG4gICAgICBtYWtlR3JvdXAoPG9iamVjdD4gc291cmNlLCAnbWFpbicsIG9wdGlvbnMpIDpcclxuICAgIG1ha2VDb250cm9sKDx1bmRlZmluZWQgfCBudWxsIHwgbnVtYmVyIHwgYm9vbGVhbiB8IHN5bWJvbCB8IHN0cmluZz4gc291cmNlLCBvcHRpb25zKTtcclxuICByZXR1cm4gPFNjYW5Gb3JtVHlwZTxUPj4gZm9ybTtcclxufTtcclxuXHJcbmZ1bmN0aW9uIGxpZnRFcnJvcnMoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xyXG4gIGlmIChjb250cm9sIGluc3RhbmNlb2YgRm9ybUNvbnRyb2wpIHtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBhbGxDb250cm9scyA9IGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtR3JvdXAgP1xyXG4gICAgICBPYmplY3QudmFsdWVzKGNvbnRyb2wuY29udHJvbHMpIDpcclxuICAgICAgY29udHJvbCBpbnN0YW5jZW9mIEZvcm1BcnJheSA/XHJcbiAgICAgICAgY29udHJvbC5jb250cm9scyA6XHJcbiAgICAgICAgW107XHJcbiAgICBjb25zdCBpbnZhbGlkQ29udHJvbHMgPSBhbGxDb250cm9scy5maWx0ZXIoY29udHJvbCA9PiBjb250cm9sLnN0YXR1cyA9PT0gJ0lOVkFMSUQnKTtcclxuICAgIHJldHVybiBpbnZhbGlkQ29udHJvbHMubGVuZ3RoID09PSAwID8gbnVsbCA6IGludmFsaWRDb250cm9scy5yZWR1Y2UoXHJcbiAgICAgIChhY2N1bXVsYXRvciwgY3VycmVudCkgPT4ge1xyXG4gICAgICAgIGlmIChjdXJyZW50LmVycm9ycykge1xyXG4gICAgICAgICAgYWRkVmFsaWRhdGlvbkVycm9ycyhjdXJyZW50LmVycm9ycywgYWNjdW11bGF0b3IpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xyXG4gICAgICB9LCA8VmFsaWRhdGlvbkVycm9ycz4ge31cclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbGlmdFZhbGlkYXRpb25FcnJvcnMoY29udHJvbDogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xyXG4gIGNvbnN0IGFsbENvbnRyb2xzID0gY29udHJvbCBpbnN0YW5jZW9mIEZvcm1Hcm91cCA/XHJcbiAgICBPYmplY3QudmFsdWVzKGNvbnRyb2wuY29udHJvbHMpIDpcclxuICAgIGNvbnRyb2wgaW5zdGFuY2VvZiBGb3JtQXJyYXkgP1xyXG4gICAgICBjb250cm9sLmNvbnRyb2xzIDpcclxuICAgICAgW107XHJcbiAgY29uc3QgaW52YWxpZENvbnRyb2xzID0gYWxsQ29udHJvbHMuZmlsdGVyKGNvbnRyb2wgPT4gY29udHJvbC5zdGF0dXMgPT09ICdJTlZBTElEJyk7XHJcbiAgY29uc3QgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzID0gaW52YWxpZENvbnRyb2xzLmxlbmd0aCA9PT0gMCA/IHt9IDogaW52YWxpZENvbnRyb2xzLnJlZHVjZShcclxuICAgIChhY2N1bXVsYXRvciwgY3VycmVudCkgPT4ge1xyXG4gICAgICBpZiAoY3VycmVudC5lcnJvcnMpIHtcclxuICAgICAgICBhZGRWYWxpZGF0aW9uRXJyb3JzKGN1cnJlbnQuZXJyb3JzLCBhY2N1bXVsYXRvcik7XHJcbiAgICAgIH07XHJcbiAgICAgIGNvbnN0IGlubmVyRXJyb3JzID0gbGlmdFZhbGlkYXRpb25FcnJvcnMoY3VycmVudCk7XHJcbiAgICAgIGlmIChpbm5lckVycm9ycykge1xyXG4gICAgICAgIGFkZFZhbGlkYXRpb25FcnJvcnMoaW5uZXJFcnJvcnMsIGFjY3VtdWxhdG9yKTtcclxuICAgICAgfTtcclxuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xyXG4gICAgfSwgPFZhbGlkYXRpb25FcnJvcnM+IHt9XHJcbiAgKTtcclxuICByZXR1cm4gT2JqZWN0LnZhbHVlcyhlcnJvcnMpLmxlbmd0aCA9PT0gMCA/IG51bGwgOiBlcnJvcnM7XHJcbn07XHJcblxyXG5mdW5jdGlvbiBhZGRWYWxpZGF0aW9uRXJyb3JzKGFkZGl0aW9uRXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzLCBjdXJyZW50RXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzKSB7XHJcbiAgT2JqZWN0LmVudHJpZXMoYWRkaXRpb25FcnJvcnMpLmZvckVhY2goXHJcbiAgICBlbnRyeSA9PiBjdXJyZW50RXJyb3JzWyBlbnRyeVsgMCBdIF0gPSBlbnRyeVsgMSBdXHJcbiAgKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFrZUNvbnRyb2w8VCBleHRlbmRzIHVuZGVmaW5lZCB8IG51bGwgfCBudW1iZXIgfCBib29sZWFuIHwgc3ltYm9sIHwgc3RyaW5nPihcclxuICBzb3VyY2U6IFQgfCBGb3JtQ29udHJvbDxUIHwgbnVsbD4sXHJcbiAgb3B0aW9ucz86IE1hcDxDb250cm9sc05hbWVzPFQ+LCBNYWtlQ29udHJvbE9wdGlvbnM+XHJcbik6IEZvcm1Db250cm9sPFQgfCBudWxsPiB7XHJcbiAgY29uc3QgY29udHJvbE9wdGlvbnMgPSBnZXRWYWxpZGF0b3JzT3JOdWxsKDxDb250cm9sc05hbWVzPFQ+PiAnbWFpbicsIG9wdGlvbnMsIGZhbHNlKTtcclxuICBjb25zdCByZXN1bHQgPSBzb3VyY2UgaW5zdGFuY2VvZiBGb3JtQ29udHJvbCA/XHJcbiAgICBzb3VyY2UgOlxyXG4gICAgbmV3IEZvcm1Db250cm9sPFQgfCBudWxsPihcclxuICAgICAgISFzb3VyY2UgJiYgdHlwZW9mIHNvdXJjZSA9PSAnc3RyaW5nJyAmJiAoc291cmNlLmluY2x1ZGVzKCcwMDAxLTAxLTAxJykgfHwgc291cmNlLmluY2x1ZGVzKCcxOTcwLTAxLTAxJykpID8gbnVsbCA6IHNvdXJjZVxyXG4gICAgICAsXHJcbiAgICAgIHtcclxuICAgICAgICB2YWxpZGF0b3JzOiBjb250cm9sT3B0aW9ucz8udmFsaWRhdG9ycyxcclxuICAgICAgICBhc3luY1ZhbGlkYXRvcnM6IGNvbnRyb2xPcHRpb25zPy5hc3luY1ZhbGlkYXRvcnMsXHJcbiAgICAgICAgdXBkYXRlT246IGNvbnRyb2xPcHRpb25zPy51cGRhdGVPbixcclxuICAgICAgICBub25OdWxsYWJsZTogY29udHJvbE9wdGlvbnM/Lm5vbk51bGxhYmxlXHJcbiAgICAgIH0sXHJcbiAgICApO1xyXG4gIGlmIChjb250cm9sT3B0aW9ucz8uZGlzYWJsZWQpIHtcclxuICAgIHJlc3VsdC5kaXNhYmxlKCk7XHJcbiAgfTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYWtlR3JvdXA8VCBleHRlbmRzIG9iamVjdCA9IG9iamVjdD4oXHJcbiAgc291cmNlOiBUIHwgRm9ybUdyb3VwVHlwZTxUPixcclxuICBpbnRlcm5hbEtleTogQ29udHJvbHNOYW1lczxUPixcclxuICBvcHRpb25zPzogTWFwPENvbnRyb2xzTmFtZXM8VD4sIE1ha2VDb250cm9sT3B0aW9ucz5cclxuKTogRm9ybUdyb3VwVHlwZTxUPiB7XHJcbiAgY29uc3QgY29udHJvbE9wdGlvbnMgPSBnZXRWYWxpZGF0b3JzT3JOdWxsKGludGVybmFsS2V5LCBvcHRpb25zLCBmYWxzZSk7XHJcbiAgY29uc3QgcmVzdWx0ID0gc291cmNlIGluc3RhbmNlb2YgRm9ybUdyb3VwPHsgWyBLIGluIFN0cmluZ0tleXM8VD4gXTogU2NhbkZvcm1UeXBlPFRbIEsgXT47IH0+ID9cclxuICAgIHNvdXJjZSA6XHJcbiAgICAoPFsgU3RyaW5nS2V5czxUPiwgVFsgU3RyaW5nS2V5czxUPiBdIF1bXT4gT2JqZWN0LmVudHJpZXMoc291cmNlKSkucmVkdWNlKFxyXG4gICAgICAoYWNjdW11bGF0b3I6IEZvcm1Hcm91cCwgZW50cnk6IFsgU3RyaW5nS2V5czxUPiwgVFsgU3RyaW5nS2V5czxUPiBdIF0pID0+IHtcclxuICAgICAgICBjb25zdCBrZXkgPSBlbnRyeVsgMCBdO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZW50cnlbIDEgXTtcclxuICAgICAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIE9ic2VydmFibGUpKSB7XHJcbiAgICAgICAgICBhY2N1bXVsYXRvci5hZGRDb250cm9sKFxyXG4gICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICEhdmFsdWUgJiYgKFxyXG4gICAgICAgICAgICAgIHZhbHVlIGluc3RhbmNlb2YgRm9ybUdyb3VwIHx8IHZhbHVlIGluc3RhbmNlb2YgRm9ybUFycmF5IHx8IHZhbHVlIGluc3RhbmNlb2YgRm9ybUNvbnRyb2xcclxuICAgICAgICAgICAgKSA/XHJcbiAgICAgICAgICAgICAgPFNjYW5Gb3JtVHlwZTxUWyBTdHJpbmdLZXlzPFQ+IF0+PiB2YWx1ZSA6XHJcbiAgICAgICAgICAgICAgbWFrZUZvcm08VFsgU3RyaW5nS2V5czxUPiBdPihcclxuICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgbWFrZU5ld01haW5NYXA8VCwgVFsgU3RyaW5nS2V5czxUPiBdPig8Q29udHJvbHNOYW1lczxUPj4ga2V5LCBvcHRpb25zKSxcclxuICAgICAgICAgICAgICApXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIDxGb3JtR3JvdXBUeXBlPFQ+PiBhY2N1bXVsYXRvcjtcclxuICAgICAgfSwgbmV3IEZvcm1Hcm91cDx7IFsgSyBpbiBTdHJpbmdLZXlzPFQ+IF06IFNjYW5Gb3JtVHlwZTxUWyBLIF0+OyB9Pig8eyBbIEsgaW4gU3RyaW5nS2V5czxUPiBdOiBTY2FuRm9ybVR5cGU8VFsgSyBdPjsgfT4ge30sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgdmFsaWRhdG9yczogY29udHJvbE9wdGlvbnM/LnZhbGlkYXRvcnMsXHJcbiAgICAgICAgICBhc3luY1ZhbGlkYXRvcnM6IGNvbnRyb2xPcHRpb25zPy5hc3luY1ZhbGlkYXRvcnMsXHJcbiAgICAgICAgICB1cGRhdGVPbjogY29udHJvbE9wdGlvbnM/LnVwZGF0ZU9uLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgaWYgKGNvbnRyb2xPcHRpb25zPy5kaXNhYmxlZCkge1xyXG4gICAgcmVzdWx0LmRpc2FibGUoKTtcclxuICB9O1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1ha2VBcnJheTxUIGV4dGVuZHMgQXJyYXk8dW5rbm93bj4sIEUgPSBUIGV4dGVuZHMgQXJyYXk8aW5mZXIgVT4gPyBVIDogbmV2ZXI+KFxyXG4gIHNvdXJjZTogRVtdIHwgRm9ybUFycmF5PFNjYW5Gb3JtVHlwZTxFPj4sXHJcbiAgb3B0aW9ucz86IE1hcDxDb250cm9sc05hbWVzPFQ+LCBNYWtlQ29udHJvbE9wdGlvbnM+XHJcbik6IEZvcm1BcnJheTxTY2FuRm9ybVR5cGU8RT4+IHtcclxuICBjb25zdCBjb250cm9sT3B0aW9ucyA9IGdldFZhbGlkYXRvcnNPck51bGwoPENvbnRyb2xzTmFtZXM8VD4+ICdtYWluJywgb3B0aW9ucywgZmFsc2UpO1xyXG4gIGNvbnN0IHJlc3VsdCA9IHNvdXJjZSBpbnN0YW5jZW9mIEZvcm1BcnJheSA/XHJcbiAgICBzb3VyY2UgOlxyXG4gICAgbmV3IEZvcm1BcnJheShcclxuICAgICAgc291cmNlLm1hcChcclxuICAgICAgICAoaXRlbTogRSkgPT4ge1xyXG4gICAgICAgICAgY29uc3QgaXRlbUZvcm0gPSBtYWtlRm9ybShcclxuICAgICAgICAgICAgaXRlbSxcclxuICAgICAgICAgICAgbWFrZU5ld01haW5NYXA8VCwgRT4oPENvbnRyb2xzTmFtZXM8VD4+ICdtYWluSXRlbXMnLCBvcHRpb25zKSxcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICByZXR1cm4gaXRlbUZvcm07XHJcbiAgICAgICAgfSksXHJcbiAgICAgIHtcclxuICAgICAgICB2YWxpZGF0b3JzOiBjb250cm9sT3B0aW9ucz8udmFsaWRhdG9ycyxcclxuICAgICAgICBhc3luY1ZhbGlkYXRvcnM6IGNvbnRyb2xPcHRpb25zPy5hc3luY1ZhbGlkYXRvcnMsXHJcbiAgICAgICAgdXBkYXRlT246IGNvbnRyb2xPcHRpb25zPy51cGRhdGVPblxyXG4gICAgICB9XHJcbiAgICApO1xyXG4gIGlmIChjb250cm9sT3B0aW9ucz8uZGlzYWJsZWQpIHtcclxuICAgIHJlc3VsdC5kaXNhYmxlKCk7XHJcbiAgfTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59Il19