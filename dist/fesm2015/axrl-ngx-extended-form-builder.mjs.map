{"version":3,"file":"axrl-ngx-extended-form-builder.mjs","sources":["../../projects/ngx-extended-form-builder/src/lib/ngx-extended-form-builder.ts","../../projects/ngx-extended-form-builder/src/public-api.ts","../../projects/ngx-extended-form-builder/src/axrl-ngx-extended-form-builder.ts"],"sourcesContent":["import { UntypedFormGroup, UntypedFormArray, UntypedFormControl } from \"@angular/forms\";\nimport type { ValidatorFn, ValidationErrors, AbstractControl, AsyncValidatorFn, AbstractControlOptions } from \"@angular/forms\";\nimport { Observable } from \"rxjs\";\n\ninterface ExtendedControlOptions extends AbstractControlOptions {\n  disabled?: boolean,\n};\n\nfunction getValidatorsOrNull<T extends ValidatorFn[] | AsyncValidatorFn[] | ExtendedControlOptions | null>(\n  key: string, keysValidator?: Map<string, T>, addLift: boolean = false\n): T | undefined | null {\n  const result = keysValidator && keysValidator.has(key) ? keysValidator.get(key) : null;\n  if (addLift) {\n    if (result && Array.isArray(result)) {\n      (<ValidatorFn[]>result).push(<ValidatorFn>liftErrors);\n      return <T>result;\n    } else {\n      return result ? result : <T>[liftErrors]\n    }\n  } else {\n    return result;\n  };\n}\n\nfunction makeFormGroup(\n  source: any,\n  internalKey: string,\n  keysValidator?: Map<string, ValidatorFn[] | ExtendedControlOptions | null>,\n  asyncKeysValidator?: Map<string, AsyncValidatorFn[] | null>\n): UntypedFormGroup {\n  return source instanceof UntypedFormGroup ? source : Object.entries(source).reduce(\n    (accumulator: UntypedFormGroup, entry: [string, unknown]) => {\n      const key = entry[0];\n      const value = entry[1];\n      if (!(value instanceof Observable)) {\n        accumulator.addControl(\n          key,\n          !!value && value instanceof UntypedFormControl || value instanceof UntypedFormGroup || value instanceof UntypedFormArray ?\n            value :\n            makeForm(\n              value,\n              makeNewMainFormValidatorsMap(key, keysValidator),\n              makeNewMainFormValidatorsMap(key, asyncKeysValidator),\n            )\n        );\n      };\n      return accumulator;\n    }, new UntypedFormGroup({},\n      getValidatorsOrNull(internalKey, keysValidator, true),\n      getValidatorsOrNull(internalKey, asyncKeysValidator, false)\n    )\n  );\n}\n\nfunction makeNewMainFormValidatorsMap<T extends ValidatorFn[] | AsyncValidatorFn[] | ExtendedControlOptions | null>(\n  key: string, oldMap?: Map<string, T>,\n): Map<string, T> | undefined {\n  if (!oldMap || key === 'mainFormValidators' || key === 'mainFormValidatorsItems') {\n    return oldMap;\n  } else {\n    if (!oldMap.has(key) && !oldMap.has(`${key}Items`)) {\n      return new Map<string, T>(\n        Array.from(\n          oldMap.entries()\n        ).filter(\n          item => item[0] !== 'mainFormValidators' && item[0] !== 'mainFormValidatorsItems'\n        ).map(\n          ([entryKey, entryValue]) => [entryKey.startsWith(`${key}.`) ? entryKey.replace(`${key}.`, '') : entryKey, entryValue]\n        )\n      );\n    } else {\n      const filterPredicate = oldMap.has('mainFormValidators') ?\n        oldMap.has('mainFormValidatorsItems') ?\n          (item: [string, T]) => item[0] !== key && item[0] !== 'mainFormValidators' && item[0] !== 'mainFormValidatorsItems' :\n          (item: [string, T]) => item[0] !== key && item[0] !== 'mainFormValidators' :\n        oldMap.has('mainFormValidatorsItems') ?\n          (item: [string, T]) => item[0] !== key && item[0] !== 'mainFormValidatorsItems' :\n          (item: [string, T]) => item[0] !== key;\n      const newMainValidatorsArray: [string, T][] = oldMap.has(key) ?\n        oldMap.has(`${key}Items`) ?\n          [\n            ['mainFormValidators', oldMap.get(key)!],\n            ['mainFormValidatorsItems', oldMap.get(`${key}Items`)!]\n          ] :\n          [\n            ['mainFormValidators', oldMap.get(key)!],\n          ] :\n        oldMap.has(`${key}Items`) ?\n          [\n            ['mainFormValidatorsItems', oldMap.get(`${key}Items`)!]\n          ] :\n          [];\n      return new Map<string, T>([\n        ...newMainValidatorsArray,\n        ...Array.from(\n          oldMap.entries()\n        ).filter(filterPredicate).map<[string, T]>(\n          ([entryKey, entryValue]) => [entryKey.startsWith(`${key}.`) ? entryKey.replace(`${key}.`, '') : entryKey, entryValue]\n        )\n      ]);\n    };\n  };\n}\n\nexport function makeForm<T,\n  R extends (T extends Array<any> ? UntypedFormArray : T extends string | number | boolean | symbol | null | undefined ? UntypedFormControl : UntypedFormGroup\n  )>(\n    source: T,\n    keysValidator?: Map<string, ValidatorFn[] | ExtendedControlOptions | null>,\n    asyncKeysValidator?: Map<string, AsyncValidatorFn[] | null>,\n): R {\n  const form = !!source && (typeof source === 'object' || typeof source === 'function') ?\n    source instanceof Array ?\n      new UntypedFormArray(\n        source.map(\n          item => {\n            const itemForm = makeForm(\n              item,\n              makeNewMainFormValidatorsMap('mainFormValidatorsItems', keysValidator),\n              makeNewMainFormValidatorsMap('mainFormValidatorsItems', asyncKeysValidator)\n            );\n            return itemForm;\n          }),\n        getValidatorsOrNull('mainFormValidators', keysValidator, true),\n        getValidatorsOrNull('mainFormValidators', asyncKeysValidator, false)\n      ) :\n      makeFormGroup(source, 'mainFormValidators', keysValidator, asyncKeysValidator) :\n    new UntypedFormControl({\n      disabled: keysValidator?.has('mainFormValidators') && 'disabled' in (keysValidator.get('mainFormValidators')!) ?\n        (<ExtendedControlOptions>keysValidator.get('mainFormValidators')).disabled :\n        false,\n      value: !!source && typeof source == 'string' && (source.includes('0001-01-01') || source.includes('1970-01-01')) ? null : source\n    },\n      getValidatorsOrNull('mainFormValidators', keysValidator, false),\n      getValidatorsOrNull('mainFormValidators', asyncKeysValidator, false)\n    );\n  return <R>form;\n};\n\nfunction liftErrors(control: AbstractControl): ValidationErrors | null {\n  if (control instanceof UntypedFormControl) {\n    return null;\n  } else {\n    const allControls = control instanceof UntypedFormGroup ?\n      Object.values(control.controls) :\n      control instanceof UntypedFormArray ?\n        control.controls :\n        [];\n    const invalidControls = allControls.filter(control => control.status === 'INVALID');\n    return invalidControls.length === 0 ? null : invalidControls.reduce(\n      (accumulator, current) => {\n        if (current.errors) {\n          addValidationErrors(current.errors, accumulator);\n        };\n        return accumulator;\n      }, <ValidationErrors>{}\n    );\n  }\n}\n\nexport function liftValidationErrors(control: AbstractControl): ValidationErrors | null {\n  const allControls = control instanceof UntypedFormGroup ?\n    Object.values(control.controls) :\n    control instanceof UntypedFormArray ?\n      control.controls :\n      [];\n  const invalidControls = allControls.filter(control => control.status === 'INVALID');\n  const errors: ValidationErrors = invalidControls.length === 0 ? {} : invalidControls.reduce(\n    (accumulator, current) => {\n      if (current.errors) {\n        addValidationErrors(current.errors, accumulator);\n      };\n      const innerErrors = liftValidationErrors(current);\n      if (innerErrors) {\n        addValidationErrors(innerErrors, accumulator);\n      };\n      return accumulator;\n    }, <ValidationErrors>{}\n  );\n  return Object.values(errors).length === 0 ? null : errors;\n};\n\nfunction addValidationErrors(additionErrors: ValidationErrors, currentErrors: ValidationErrors) {\n  Object.entries(additionErrors).forEach(\n    entry => currentErrors[entry[0]] = entry[1]\n  );\n}","/*\n * Public API Surface of ngx-extended-form-builder\n */\n\nexport * from './lib/ngx-extended-form-builder';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}